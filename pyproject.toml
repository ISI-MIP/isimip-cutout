[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

__author__ = 'Jochen Klar'
__email__ = 'jochen.klar@pik-potsdam.de'
__license__ = 'MIT'
__copyright__ = 'Copyright (c) 2020 Potsdam Institute for Climate Impact Research'


[project]
name = "isimip-files-api"
authors = [
    { name = "Jochen Klar", email = "jochen.klar@pik-potsdam.de" },
]
maintainers = [
    { name = "Jochen Klar", email = "jochen.klar@pik-potsdam.de" },
]
description = "A webservice to asynchronously mask regions from NetCDF files, using Flask and RQ."

readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
classifiers = [
    'Operating System :: OS Independent',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12'
]
dependencies = [
    "Flask~=3.0.0",
    "Flask-Cors~=4.0.0",
    "gunicorn~=21.2.0",
    "netCDF4~=1.6.5",
    "numpy~=1.26.3",
    "tomli",
    "rq~=1.15.1"
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/ISI-MIP/isimip-files-api"

[project.optional-dependencies]
dev = [
    "build",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "ruff",
    "twine"
]

[tool.setuptools]
packages = ["isimip_files_api"]

[tool.setuptools.dynamic]
version = { attr = "isimip_files_api.__version__" }

[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "PGH",  # pygrep-hooks
    "RUF",  # ruff
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "YTT",  # flake8-2020
]
ignore = [
    "B006",   # mutable-argument-default
    "B007",   # unused-loop-control-variable
    "B018",   # useless-expression
    "RUF012", # mutable-class-default
]

[tool.ruff.isort]
known-first-party = [
    "isimip_files_api"
]
section-order = [
    "future",
    "standard-library",
    "pytest",
    "flask",
    "rq",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.isort.sections]
pytest = ["pytest"]
flask = ["flask"]
rq = ["rq"]

[tool.pytest.ini_options]
testpaths = ["isimip_files_api"]

[tool.coverage.run]
source = ["isimip_files_api"]

[tool.coverage.report]
omit = [
    "*/tests/*",
]
exclude_lines = [
    "raise Exception",
    "except ImportError:"
]
